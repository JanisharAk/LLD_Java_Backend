Singleton Design Pattern:-
         The Singleton Design Pattern ensures that a class has
         only one instance and provides a global access point
         to that instance. It is commonly used in scenarios
         where a single point of control is required, such as
         managing database connections, logging, or caching.


Key Features of Singleton Pattern:
         a:- Single Instance - Ensures only one instance of the class exists.
         b:- Global Access Point - Provides a way to access the single instance.
         c:- Thread Safety - Prevents multiple threads from creating new instances.
         d:- Lazy Initialization (Optional) - The instance is created only when needed.


Real-World Use Case in a Library System:
         a:- The Library Database should be a singleton to prevent multiple connections
             and ensure efficient resource management.
         b:- Logging System - A singleton can be used to maintain logs of all book
             transactions.
         c:- Configuration Management - Library settings (e.g., late fee, opening hours)
             can be managed using a singleton.


Some common ways to break the Singleton pattern and their respective solutions:
        1. Reflection (Bypassing Private Constructor)
           How it Breaks Singleton?
               a:- Using Java Reflection, we can access the private constructor and create multiple
                   instances of a Singleton class.
           Solution:
               a:- Throw an exception if an instance already exists in the private constructor.
               b:- Use an enum-based Singleton, as Java enums prevent reflection-based instantiation.


        2. Cloning (Breaking Singleton with clone() Method)
           How it Breaks Singleton?
                a:- The clone() method can create multiple copies of the Singleton instance.

           Solution:
                a:- Override clone() and throw an exception.


        3. Serialization & Deserialization
           How it Breaks Singleton?
                a:- When a Singleton class implements Serializable, serialization and deserialization
                    can create multiple instances.

           Solution:
                a:- Implement the readResolve() method to return the existing instance
                    during deserialization.

        4. Multi-Threading Issues (Race Condition)
           How it Breaks Singleton?
                a:- In a multi-threaded environment, multiple threads might create different Singleton
                    instances if proper synchronization is not used.

           Solution:
                a:- Use Double-Checked Locking:

        5. Using Multiple Class Loaders
           How it Breaks Singleton?
                a:- If the Singleton class is loaded by different class loaders,
                    multiple instances can be created.

           Solution:
                a:- Use class loader constraints and ensure the Singleton class is
                    loaded by only one class loader.

        6. Garbage Collection
           How it Breaks Singleton?
                 a:- If a Singleton instance is stored as a weak reference, the garbage
                     collector can destroy it, leading to multiple instances.

           Solution:
                 a:- Use strong references and ensure the instance is always referenced.

-----------------------------------
what is Enum Singleton in Java?

Ans:- Enum Singleton is the most robust and recommended way to implement the
      Singleton pattern in Java. It overcomes issues like Reflection, Serialization,
      Cloning, and Multi-threading that can break traditional Singleton implementations.

Why Use Enum Singleton?
a:- Thread-Safe by Default - Enums in Java are inherently thread-safe.
b:- Prevents Reflection Attack - Reflection cannot create a new instance of an Enum.
c:- Prevents Serialization Attack - Enum prevents multiple instances via serialization.
d:- Prevents Cloning Attack - Enum does not support cloning.
e:- Simpler & Cleaner Code - No need for synchronization, double-checked locking, or readResolve().