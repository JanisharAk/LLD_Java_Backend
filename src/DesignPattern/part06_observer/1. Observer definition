Observer Design Pattern
Definition:-
  ✅ The Observer Pattern is a behavioral design pattern in which an object, known as
      the subject, maintains a list of its dependent observers and notifies them of any
      state changes. This promotes a one-to-many dependency between objects

Why We Use the Observer Pattern?

1. Loose Coupling Between Objects
  ✅ The subject (observable) and the observers (listeners) are independent.
  ✅ The subject does not need to know details about the observers, just that they implement an interface.
  ✅ This reduces dependencies and makes the system modular.
Example
  ✅ In a notification system:
  Subject: News Publisher
  Observers: Email Subscribers, SMS Subscribers, Mobile App
  When a new article is published, all subscribers are notified without modifying the publisher's code.


2. Automatic Updates & Real-Time Synchronization
  ✅ Observers get automatically updated whenever the subject changes.
  ✅ No need to manually check for updates, reducing polling overhead.
Example
  ✅ In a weather app, multiple displays (mobile, web, smartwatch) should update in
      real-time when temperature data changes.


3. Scalability & Extensibility
  ✅ New observers can be added without modifying the subject.
  ✅ Useful in event-driven architectures where new subscribers (listeners) can be
     attached dynamically.
Example
  ✅ In an e-commerce platform: A customer places an order (subject changes).
  ✅ Observers like inventory service, email service, and shipping service get notified
     automatically.


4. Efficient Event-Driven Programming
  ✅ Instead of checking (polling) for updates, the observer pattern pushes changes to subscribers.
  ✅ Reduces CPU and network usage.

Example
  ✅ GUI Applications: A button click event notifies all registered listeners.
  ✅ Stock Market Tickers: Investors get updates when stock prices change.


5. Supports Publish-Subscribe Architecture
  ✅ Observer pattern is widely used in pub-sub systems like Kafka, RabbitMQ, Redis Pub/Sub.
  ✅ Subscribers (observers) receive updates asynchronously from a publisher (subject).
Example
  ✅ A YouTube Channel (Publisher) notifies Subscribers when a new video is uploaded.



                       =============================================

                 Ways to Break the Observer Design Pattern & Their Solutions

1. Forgetting to Unsubscribe Observers (Memory Leak)
Issue:
  ✅ If observers are not properly removed from the subject when they are no longer needed,
     they may continue receiving updates, leading to memory leaks and unintended behavior.

Solution:
  ✅ Ensure observers explicitly unsubscribe when they are no longer needed.
  ✅ Use weak references (if supported by the language) to avoid preventing garbage collection.
  ✅ Implement auto-removal mechanisms if an observer becomes unreachable.

2. Observer Throwing Exceptions
Issue:
  ✅ If an observer throws an exception during the notification process, it can break the
      entire update cycle, preventing other observers from receiving updates.

Solution:
  ✅ Catch exceptions at the Subject level to prevent a single observer from disrupting the notification process.
  ✅ Log errors without stopping other observers.


3. Circular Dependencies (Infinite Loops)
Issue:
  ✅ If an observer modifies the subject in response to a notification, it can lead to infinite loops.

Solution:
  ✅ Track state changes to prevent redundant updates.
  ✅ Use flags to detect and break recursion.
  ✅ Use event queues to defer updates and avoid cyclic triggering.

4. Modifying Observers List While Iterating
Issue:
  ✅ If an observer is added or removed while the subject is iterating over the observer list, it can result in ConcurrentModificationException or undefined behavior.

Solution:
  ✅ Use a copy-on-write approach to iterate over a cloned list.
  ✅ Use synchronized collections (e.g., CopyOnWriteArrayList in Java).
  ✅ Defer modifications until after iteration.
